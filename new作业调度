//
//  main.c
//  操作系统实验一(作业调度算法)
//
//  Created by 李若白 on 2019/11/18.
//  Copyright © 2019 李若白. All rights reserved.
//

//
//  main.c
//  操作系统实验
//
//  Created by 李若白 on 2019/11/12.
//  Copyright © 2019 李若白. All rights reserved.
//
//  进程调度算法：分别采用先来先服务算法、短作业优先算法、高响应比优先算法实现。
//  系统结构为模拟时钟，主要由循环控制，可以加入时间库来模拟时间差
/*
    设计思路：首先将进程写在进程控制块中，进程控制块有这几种方法的通用属性，这样来存储进程。
    而进入模拟进程调度程序后，我将设计一个运行队列，也就是说这个队列应该是按照先来后到安排出来的，因为先来先服务
    这个应该是设计成一个链表队列，应该有基本的链表队列的方法，假设这个链表队列我已经写好，那么我的运行方法q其实
    有多种，我可以先进行遍历，按照先来后到的顺序进行运行队列初始化，我先初始化这个队列，然后在按照顺序进行计算分析
    也可以进行全真模拟，也就是说，队列一开始没有初始化，一个一个来，这样看上去代价将会很大
 
    链表队列操作：队列添加，队列删除，队列添加时从后面加，删除是从前面删
 
 
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

typedef struct {
    char progress_name[10];//进程名
    int priority;//进程的优先级
    int arrive_time;//到达时间
    int serve_time;//要求服务时间
    int progress_state;//进程状态
    int real_sever_time;//真实服务时间
    int wait_time;//等待时间
    int leave_time;//离开时间
}PCB;//PCB为进程控制快，这里将进程控制块抽象成一个结构体

int time_clock;//时间轴，在每一次调度开始前都要置0

/*链式队列的创建与操作*/
typedef struct ele{
    PCB a_progress_pcb;
    struct ele* next;
}PCB_node;

typedef struct ele_quene{
    PCB_node* PCB_head;
    PCB_node* PCB_tail;
    int quene_long;
}PCB_quene;

void quene_init(PCB_quene **que){
    *que = (PCB_quene*)malloc(sizeof(PCB_quene));
    (*que)->PCB_head = NULL;
    (*que)->PCB_tail = NULL;
    (*que)->quene_long = 0;
}//初始化链表，我发现我已经不知道怎么写了，网上找的，至于为何用二级指针，有可能为了操作统一，还需加深理解

void PCB_enter(PCB_quene* que, PCB progress)
{
    if(que == NULL)
        return ;
    PCB_node* pTemp = (PCB_node*)malloc(sizeof(PCB_node));
    pTemp->a_progress_pcb = progress;
    pTemp->next = NULL;

    if(que->PCB_head==NULL){
        que->PCB_head = pTemp;
    }else{
        que->PCB_tail->next = pTemp;
    }
    que->PCB_tail = pTemp;
    que->quene_long++;
}


PCB PCB_leave(PCB_quene* que)
{
    PCB error;
    error.arrive_time=-1;
    error.leave_time=-1;
    error.priority=-1;
    strcpy(error.progress_name,"error");
    error.progress_state=-1;
    error.serve_time=-1;
    error.wait_time=-1;
    if(que == NULL || que->quene_long == 0)
        return error;
    PCB_node* pDel = NULL;
    PCB res;
    pDel = que->PCB_head;
    que->PCB_head = que->PCB_head->next;
    res = pDel->a_progress_pcb;
    free(pDel);
    que->quene_long--;
 
    if(que->quene_long == 0)
        que->PCB_tail = NULL;
    return res;
}

int init_a_pcb(PCB static_list[]){
    strcpy(static_list[0].progress_name, "A");
    static_list[0].arrive_time=7;
    static_list[0].priority=-1;
    static_list[0].serve_time=7;
    static_list[0].leave_time=-1;
    static_list[0].wait_time=-1;
    static_list[0].progress_state=1;
    static_list[0].real_sever_time = static_list[0].serve_time;
    strcpy(static_list[1].progress_name, "B");
    static_list[1].arrive_time=2;
    static_list[1].priority=-1;
    static_list[1].serve_time=6;
    static_list[1].leave_time=-1;
    static_list[1].wait_time=-1;
    static_list[1].progress_state=1;
    static_list[1].real_sever_time = static_list[1].serve_time;
    strcpy(static_list[2].progress_name, "C");
    static_list[2].arrive_time=3;
    static_list[2].priority=-1;
    static_list[2].serve_time=5;
    static_list[2].leave_time=-1;
    static_list[2].wait_time=-1;
    static_list[2].progress_state=1;
    static_list[2].real_sever_time = static_list[2].serve_time;
    strcpy(static_list[3].progress_name, "D");
    static_list[3].arrive_time=4;
    static_list[3].priority=-1;
    static_list[3].serve_time=1;
    static_list[3].leave_time=-1;
    static_list[3].wait_time=-1;
    static_list[3].progress_state=1;
    static_list[3].real_sever_time = static_list[3].serve_time;
    return 4;
}

/*操作函数表*/
int menu(void);
void output(PCB pcblist[],int num);
PCB_quene* time_paixu(PCB undolist[],int num);
void time_output(PCB_quene* list);
void FCFS_method(PCB_quene* pcb_quene);
void SJE_method(PCB_quene* pcb_quene);
void yxj_paixu(PCB_quene* npx);
void refresh_timeyxj(PCB_quene* pcb_quene);
void HRRN_method(PCB_quene* pcb_quene);
void time_piece(PCB_quene* pcb_quene);

int main(int argc, const char * argv[]) {
    PCB undolist[20],new_pcb;
    PCB_quene* pcb_quene;
    int flag=1,option,input_flag=0;//标志位f和操作位
    int pcb_num=0,pcb_num_count;//进程数量和进程计数器
    while(flag){
        option=menu();
        if(option==1){
            printf("请输入进程个数:");
            scanf("%d",&pcb_num);
            for(pcb_num_count=0;pcb_num_count<pcb_num;pcb_num_count++){
                printf("请输入[%d]号进程名:",pcb_num_count);scanf("%s",new_pcb.progress_name);
                printf("请输入[%d]号进程到达时间:",pcb_num_count);scanf("%d",&new_pcb.arrive_time);
                printf("请输入[%d]号进程服务时间:",pcb_num_count);scanf("%d",&new_pcb.serve_time);
                new_pcb.real_sever_time = new_pcb.serve_time;
                //printf("请输入[%d]号进程优先级:",pcb_num_count);scanf("%d",&new_pcb.priority);
                printf("\n\n");
                new_pcb.wait_time=-1;//当前的新pcb等待时间和离开时间都定为未知
                new_pcb.leave_time=-1;
                new_pcb.progress_state=0;
                //状态定为就绪状态，就绪为1，运行为2，完成为3，0为未到达，进入就绪队列后为1，在运行中为0，运行结束后为3
                new_pcb.priority=-1;//在此处优先级不考虑，为未知，具体是多少根据方法而改变
                undolist[pcb_num_count]=new_pcb;
                input_flag=1;
            }
        }
        else if(option==7){
            flag=0;
        }
        else if(option==2){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            output(undolist, pcb_num);
        }
        else if(option==6){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            pcb_quene=time_paixu(undolist, pcb_num);
            time_output(pcb_quene);
            //yxj_paixu(pcb_quene);
        }
        else if (option==3){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            pcb_quene=time_paixu(undolist, pcb_num);
            FCFS_method(pcb_quene);
        }else if(option==4){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            pcb_quene=time_paixu(undolist, pcb_num);
            refresh_timeyxj(pcb_quene);//进行优先级刷新，当然是根据服务时间
            SJE_method(pcb_quene);
        }else if(option==5){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            pcb_quene=time_paixu(undolist, pcb_num);
            HRRN_method(pcb_quene);
        }else if(option==8){
            if(input_flag==0)
                pcb_num=init_a_pcb(undolist);
            pcb_quene=time_paixu(undolist, pcb_num);
            time_piece(pcb_quene);
        }
    }
    
    
    return 0;
}
int menu(void){//用于显示操作菜单与返回操作数
    printf("请选择进程操作:\n");
    printf("1.输入进程信息\n");
    printf("2.显示进程信息\n");
    printf("3.先来先服务调度\n");
    printf("4.短作业优先调度\n");
    printf("5.高响应比优先调度\n");
    printf("6.时间顺序输出进程\n");
    printf("8.时间片轮转\n");
    printf("7.退出\n");
    int flag;
    scanf("%d",&flag);
    printf("\n\n");
    return flag;
}
void output(PCB pcblist[],int num){//用于输出
    int i;
    if(num==0){
        printf("当前系统无进程");
        return;
    }
    for(i=0;i<num;i++){
        printf("第%d号进程的进程名为:%s。\n",i,pcblist[i].progress_name);
        printf("第%d号进程的到达时间为:%d。\n",i,pcblist[i].arrive_time);
        printf("第%d号进程的服务时间为:%d。\n",i,pcblist[i].serve_time);
        if(pcblist[i].priority!=-1)
            printf("第%d号进程的优先级为:%d。\n",i,pcblist[i].priority);
        else
            printf("暂时没有设定优先级。");
        printf("\n\n");
    }
}
PCB_quene* time_paixu(PCB undolist[],int num){//需要进行重指针保存，时间排序，这里是返回一个时间x上的先后队列，用于表示先来后到
    PCB_quene *endquene;
    quene_init(&endquene);
    int i,j,minum;
    PCB min,chen;
    for(i=0;i<num;i++){
        min = undolist[i];
        minum=i;
        for(j=i+1;j<num;j++){
            if(min.arrive_time>undolist[j].arrive_time){
                min = undolist[j];
                minum = j;
            }
        }
        chen = undolist[i];
        undolist[i] = min;
        undolist[minum] = chen;
    }
    
    for(i=0;i<num;i++){
        PCB_enter(endquene, undolist[i]);
    }
    /*
    PCB_node *head = endquene->PCB_head;
    while(head!=NULL){
        PCB a = head->a_progress_pcb;
        printf("%d",a.arrive_time);
        head = head->next;
    } 用于进行测试，输出一个链表，这里已经将链表进行时间先来后到进行排序并会返回，用于进行先来先服务的操作*/
    
    return endquene;//返回排好序的链表，即进程按时序到达的先后关系，即先来后到的关系，由于出入队列的操作，实际上可以自由转化
}
void yxj_paixu(PCB_quene* npx){
    PCB undolist[20];
    int i,n = npx->quene_long,j,minum;
    for(i = 0;i<n;i++){
        undolist[i]=PCB_leave(npx);
    }
    
    PCB max,chen;
    for(i=0;i<n;i++){
        max = undolist[i];
        minum=i;
        for(j=i+1;j<n;j++){
            if(max.priority<undolist[j].priority){
                max = undolist[j];
                minum = j;
            }
        }
        chen = undolist[i];
        undolist[i] = max;
        undolist[minum] = chen;
    }
    /*for(i=0;i<n;i++){
        printf("%s ",undolist[i].progress_name);
        printf("%d\n",undolist[i].priority);
    }用于进行查错检验，目前查到问题，由于排序机制导致的*/
    for(i=0;i<n;i++){
        PCB_enter(npx, undolist[i]);
    }
    
}



void time_output(PCB_quene* list){//好了，先不考虑链表的问题，先用
    PCB_node *head = list->PCB_head;
    int i=0;
    while(head!=NULL){
        PCB a = head->a_progress_pcb;
        printf("%d号",i);
        i++;
        printf("进程名为:%s。\n",a.progress_name);
        printf("到达时间为:%d。\n",a.arrive_time);
        printf("服务时间为:%d。\n",a.serve_time);
        if(a.priority!=-1)
            printf("优先级为:%d。\n",a.priority);
        else
            printf("暂时没有设定优先级");
        printf("\n\n");
        head = head->next;
    }
}
void FCFS_method(PCB_quene* pcb_quene){
    time_clock=0;//时间轴必须置0,为当前时间，上一个的离开减去当前的到达
    int wait;
    int run_time;
    int run_time_sum=0;
    double quan_run_time_sum=0;
    PCB_node *head = pcb_quene->PCB_head;
    PCB per_node;
    while(head!=NULL){
        sleep(1);
        per_node = head->a_progress_pcb;
        wait = time_clock-per_node.arrive_time;//time_clock记录上一个离开
        if(wait<0){
            per_node.wait_time=0;
        }else{
            per_node.wait_time=wait;
        }
        time_clock=per_node.arrive_time+per_node.serve_time+per_node.wait_time;//离开时间为到达时间加上等待时间加上服务时间
        run_time=per_node.serve_time+per_node.wait_time;
        run_time_sum =run_time_sum+run_time;
        quan_run_time_sum =quan_run_time_sum+(run_time*1.0)/per_node.serve_time;
        per_node.leave_time=time_clock;
        printf("进程:%s\n",per_node.progress_name);
        printf("到达时间:%d\n",per_node.arrive_time);
        printf("服务时间:%d\n",per_node.serve_time);
        printf("离开时间:%d\n",per_node.leave_time);
        printf("等待时间:%d\n",per_node.wait_time);
        printf("周转时间:%d\n",run_time);
        printf("带权周转时间:%lf\n",(run_time*1.0)/per_node.serve_time);
        printf("\n\n");
        head = head->next;
    }
    printf("平均周转时间为:%.3lf\n",(run_time_sum*1.0)/pcb_quene->quene_long);
    printf("带权平均周转时间为:%.3lf\n",quan_run_time_sum/pcb_quene->quene_long);
    printf("\n\n");
}

void SJE_method(PCB_quene* pcb_quene){
    int n = pcb_quene->quene_long;
    int run_time;
    int run_time_sum=0;
    double quan_run_time_sum=0;
    time_clock=0;//时间z轴置0
    PCB_node *head;
    PCB_quene* ready_quene;//就绪队列
    quene_init(&ready_quene);
    PCB runing_pcb,lve;
    int wait;
    while(1){
        sleep(1);
        if(ready_quene->quene_long==0){
            PCB_enter(ready_quene, PCB_leave(pcb_quene));//如果就绪队列没有PCB，那么将从时间管道内请求一个
        }//否则的话要向就绪队列中请求一个来运行
        runing_pcb = PCB_leave(ready_quene);//向队头请求一个,获得其进程，将先求等待时间等一系例时间
        runing_pcb.progress_state=2;
        wait = time_clock-runing_pcb.arrive_time;//time_clock记录上一个离开
        if(wait<0){
            runing_pcb.wait_time=0;
        }else{
            runing_pcb.wait_time=wait;
        }
        time_clock=runing_pcb.arrive_time+runing_pcb.serve_time+runing_pcb.wait_time;//计算出当前进程的离开时间
        
        run_time=runing_pcb.serve_time+runing_pcb.wait_time;
        run_time_sum =run_time_sum+run_time;
        quan_run_time_sum =quan_run_time_sum+(run_time*1.0)/runing_pcb.serve_time;
        runing_pcb.leave_time=time_clock;
        //printf("%d",time_clock);
        head=pcb_quene->PCB_head;
        while(head!=NULL){
            if(head->a_progress_pcb.arrive_time<=time_clock){
                lve =head->a_progress_pcb;
                lve.progress_state=1;
                //printf("%s",lve.progress_name);
                PCB_enter(ready_quene, lve);
                PCB_leave(pcb_quene);
                head=pcb_quene->PCB_head;
            }else
                head = head->next;
        }printf("\n");
        //更新队列
        yxj_paixu(ready_quene);//按照优先级排序
        //printf("%s %d %d\n",runing_pcb.progress_name,runing_pcb.arrive_time,runing_pcb.priority);
        printf("进程:%s\n",runing_pcb.progress_name);
        printf("优先级:%d\n",runing_pcb.priority);
        printf("到达时间:%d\n",runing_pcb.arrive_time);
        printf("服务时间:%d\n",runing_pcb.serve_time);
        printf("离开时间:%d\n",runing_pcb.leave_time);
        printf("等待时间:%d\n",runing_pcb.wait_time);
        printf("周转时间:%d\n",run_time);
        printf("带权周转时间:%lf\n",(run_time*1.0)/runing_pcb.serve_time);
        printf("\n\n");
        runing_pcb.progress_state=3;
        if(ready_quene->quene_long==0&&pcb_quene->quene_long==0){
            break;
        }
    }
    printf("平均周转时间为:%.3lf\n",(run_time_sum*1.0)/n);
    printf("带权平均周转时间为:%.3lf\n",quan_run_time_sum/n);
    printf("\n\n");
}

void refresh_timeyxj(PCB_quene* pcb_quene){
    PCB_node* head = pcb_quene->PCB_head;
    while(head!=NULL){
        head->a_progress_pcb.priority = 100-head->a_progress_pcb.serve_time;
        head=head->next;
    }
}
void HRRN_method(PCB_quene* pcb_quene){
    int n = pcb_quene->quene_long;
    int run_time;
    int run_time_sum=0;
    double quan_run_time_sum=0;
    time_clock=0;//时间z轴置0
    PCB_node *head,*head1;
    PCB_quene* ready_quene;
    quene_init(&ready_quene);
    PCB runing_pcb,lve,ls;
    int wait;
    while(1){
        sleep(1);
        if(ready_quene->quene_long==0){
            ls=PCB_leave(pcb_quene);
            ls.priority=1;
            PCB_enter(ready_quene, ls);//如果就绪队列没有PCB，那么将从时间管道内请求一个
        }//否则的话要向就绪队列中请求一个来运行
        runing_pcb = PCB_leave(ready_quene);//向队头请求一个,获得其进程，将先求等待时间等一系例时间
        runing_pcb.progress_state=2;
        wait = time_clock-runing_pcb.arrive_time;//time_clock记录上一个离开
        if(wait<0){
            runing_pcb.wait_time=0;
        }else{
            runing_pcb.wait_time=wait;
        }//实际等待时间刷新
        time_clock=runing_pcb.arrive_time+runing_pcb.serve_time+runing_pcb.wait_time;//计算出当前进程的离开时间
        
        run_time=runing_pcb.serve_time+runing_pcb.wait_time;
        run_time_sum =run_time_sum+run_time;
        quan_run_time_sum =quan_run_time_sum+(run_time*1.0)/runing_pcb.serve_time;
        runing_pcb.leave_time=time_clock;
        //printf("%d",time_clock);
        head=pcb_quene->PCB_head;
        while(head!=NULL){
            if(head->a_progress_pcb.arrive_time<=time_clock){
                lve =head->a_progress_pcb;
                lve.progress_state=1;
                lve.wait_time=time_clock-lve.arrive_time;
                lve.priority=(lve.wait_time+lve.serve_time)/lve.serve_time;
                //printf("%s",lve.progress_name);
                PCB_enter(ready_quene, lve);
                PCB_leave(pcb_quene);
                head=pcb_quene->PCB_head;
            }else
                head = head->next;
        }
        head1=ready_quene->PCB_head;
        while(head1!=NULL){
            
            head1->a_progress_pcb.wait_time=time_clock-head1->a_progress_pcb.arrive_time;
            head1->a_progress_pcb.priority=(head1->a_progress_pcb.wait_time+head1->a_progress_pcb.serve_time)/head1->a_progress_pcb.serve_time;
            head1=head1->next;
        }
        //更新队列
        yxj_paixu(ready_quene);//按照优先级排序
        //printf("%s %d %d\n",runing_pcb.progress_name,runing_pcb.arrive_time,runing_pcb.priority);
        printf("进程:%s\n",runing_pcb.progress_name);
        printf("优先级:%d\n",runing_pcb.priority);
        printf("到达时间:%d\n",runing_pcb.arrive_time);
        printf("服务时间:%d\n",runing_pcb.serve_time);
        printf("离开时间:%d\n",runing_pcb.leave_time);
        printf("等待时间:%d\n",runing_pcb.wait_time);
        printf("周转时间:%d\n",run_time);
        printf("带权周转时间:%lf\n",(run_time*1.0)/runing_pcb.serve_time);
        printf("\n\n");
        runing_pcb.progress_state=3;
        if(ready_quene->quene_long==0&&pcb_quene->quene_long==0){
            break;
        }
    }
    printf("平均周转时间为:%.3lf\n",(run_time_sum*1.0)/n);
    printf("带权平均周转时间为:%.3lf\n",quan_run_time_sum/n);
    printf("\n\n");
}
void time_piece(PCB_quene* pcb_quene){
    time_clock = 0;//此算法需要保留现场，也就是说服务时间需要动态保存，而到达时间在进行时间片轮转时就会基本上失去作用
    int run_time,time_i=0;
    //任务一个个地进入并且按照时间片运行
    //我此时需要一个时间片运行队列，也就是说我还需要一个运行队列
    //PCB_node come_pcb;
    int time_piece;
    PCB_node *head;
    printf("请输入设定的时间片:");
    scanf("%d",&time_piece);
    PCB_quene* runing_pcbs;
    PCB runingpcb;
    quene_init(&runing_pcbs);
    //printf("%d %d",runing_pcbs->quene_long,pcb_quene->quene_long);
    while (1) {
        if(runing_pcbs->quene_long==0){
            PCB_enter(runing_pcbs, PCB_leave(pcb_quene));
            //printf("%d %d",runing_pcbs->quene_long,pcb_quene->quene_long);
        }
        runingpcb=PCB_leave(runing_pcbs);
        //printf("%d %d",runing_pcbs->quene_long,pcb_quene->quene_long);
        sleep(time_piece);
        for(int j=0;j<3;j++){
            sleep(1);
            printf(".");
        }
        printf("time piece %d star\n",time_i);
        time_i++;
        printf("+-----+-----+-----+\n");
        printf("|name |arivt|servt|\n");
        printf("+-----+-----+-----+\n");
        head=runing_pcbs->PCB_head;
        while(head!=NULL){
            printf("|%5s|%5d|%5d|\n",head->a_progress_pcb.progress_name,head->a_progress_pcb.arrive_time,head->a_progress_pcb.serve_time);
            printf("+-----+-----+-----+\n");
            
            head=head->next;
        }printf("\n");
        if(runingpcb.serve_time>time_piece){
            runingpcb.serve_time-=time_piece;//服务时间s减少
            
            
            time_clock = runingpcb.arrive_time+time_piece;//时间钟变化
            head=pcb_quene->PCB_head;//新元素入队
            while(head!=NULL){
                if(head->a_progress_pcb.arrive_time<=time_clock){
                    PCB_enter(runing_pcbs, head->a_progress_pcb);
                    PCB_leave(pcb_quene);
                    head=pcb_quene->PCB_head;
                }
                else{
                    head = head->next;
                }
                
            }
            PCB_enter(runing_pcbs, runingpcb);//从新入队
        }else{
            
            runingpcb.leave_time = time_clock + runingpcb.serve_time;
            //该走了
            time_clock = time_clock + runingpcb.serve_time;//时间钟变化
            head=pcb_quene->PCB_head;//新元素入队
            while(head!=NULL){
                if(head->a_progress_pcb.arrive_time<=time_clock){
                    PCB_enter(runing_pcbs, head->a_progress_pcb);
                    PCB_leave(pcb_quene);
                    head=pcb_quene->PCB_head;
                }else{head = head->next;}
                
            }
            run_time = runingpcb.leave_time-runingpcb.arrive_time;
            
            printf("进程:%s\n",runingpcb.progress_name);
            //printf("优先级:%d\n",runingpcb.priority);
            printf("到达时间:%d\n",runingpcb.arrive_time);
            printf("服务时间:%d\n",runingpcb.serve_time);
            printf("离开时间:%d\n",runingpcb.leave_time);
            //printf("等待时间:%d\n",runingpcb.wait_time);
            printf("周转时间:%d\n",run_time);
            printf("带权周转时间:%lf\n",(run_time*1.0)/runingpcb.real_sever_time);
            printf("\n\n");
        }
        if(runing_pcbs->quene_long==0&&pcb_quene->quene_long==0){
            break;
        }
        
    }
}
