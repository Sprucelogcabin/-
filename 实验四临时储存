#include<stdio.h>
#include<stdlib.h>
#define p 100
int plan[p][2];  //plan:储存进程的时间 plan[][0]:代表到达时间  plan[][1]:代表服务时间 
char name[p];	//name：储存进程的名字 
int chache[p];
int sum_chache=1024;
struct lian
	{
		char name;
		int address;
		int size;
		int sign;
	}link[p];

void menu();
int first();
int second(int record);
void third(int record);
void fourth(int record);
void fifth(int record);

int main()
{
	int choice,record;
	record = 0;
	while(1)
	{
		menu();
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
				record = first();
				break;
			case 2:
				record = second(record);
				break;
			case 3:
				third(record);
				break;
			case 4:
				fourth(record);
				break;
			case 5:
				fifth(record);
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 0:
				return 0;
				break;
			default:
				printf("请输入正确的数字!\n");
				break;	
		}
	}	
}

void menu()
{
	printf("进度调度模拟程序\n");
	printf("1. 输入作业情况\n");
	printf("2. 显示作业情况(未录入作业情况下将自动生成测试用例)\n");
	printf("3. 先来先服务算法\n");
	printf("4. 短作业优先算法\n");
	printf("5. 高响应比优先算法\n");
	printf("6. 时间片轮换算法\n");
	printf("7. 多级反馈队列调度\n");
	printf("8. 算法结果对比\n");
	printf("0. 退出\n\n");
	printf("请输入选择:");
}

int first()
{
	printf("请输入您想要创建的进程个数:");
	int count,i;
	scanf("%d",&count);
	getchar();
	for(i=0;i<count;i++)
	{
		printf("进程名字:");
		scanf("%c",&name[i]);
		printf("到达时间:");
		scanf("%d",&plan[i][0]);
		printf("服务时间:");
		scanf("%d",&plan[i][1]);
		getchar();
	}
	printf("\n");
	int record;
	record = i;
	return record;
}

int second(int record)
{
	int i;
	if(record==0)
	{
		name[0]='A';
		plan[0][0]=0;
		plan[0][1]=3;
		chache[0]=100;
		
		name[1]='B';
		plan[1][0]=2;
		plan[1][1]=6;
		chache[1]=200;
		
		name[2]='C';
		plan[2][0]=4;
		plan[2][1]=4;
		chache[2]=150;
		
		name[3]='D';
		plan[3][0]=6;
		plan[3][1]=5;
		chache[3]=80;
		
		name[4]='E';
		plan[4][0]=8;
		plan[4][1]=2;
		chache[4]=125;
		
		record = 5;
		goto aa;
	}
	else
	{
		aa:
		printf("\n  进程名:   ");
		for(i=0;i<record;i++)
		{
			printf("%c  ",name[i]);
		}
		printf("\n到达时间:   ");
		for(i=0;i<record;i++)
		{
			printf("%d  ",plan[i][0]);
		}
		printf("\n服务时间:   ");
		for(i=0;i<record;i++)
		{
			printf("%d  ",plan[i][1]);
		}
		printf("\n\n");
	}
	
	return record;
}

void third(int record)
{
	if(record==0)
	{
		printf("没有进程创建!\n\n");
	}
	else
	{
		
		link[0].name = ' ';
		link[0].address = 0;
		link[0].size = 1024;
		link[0].sign = 0;
		
		
		int i_cha = 0;
		int i_count = 0;
		int i,a,sum=0;   //i:增长用的 a:增长用的 sum:周转时间总时间 
		float sum_quan = 0 ;  //sum_quan:带权增长时间总时间 
		int temp[record][2];  //temp[record][2]:临时储存进程数组，用于做排序交换 
		char name_temp[record];  //name_temp:临时储存进程的名字，用于排序交换 
		int time[record][2];	//time:用于显示完成时间和周转时间  time[][0]:代表完成时间 time[][1]:代表周转时间 
		float quan[record];		//quan:用于显示带权时间 
		float avg = 0;		//avg:平均周转时间 
		float avg_quan = 0;		//avg_quan:平均带权周转时间 
		
		for(i=0;i<record-1;i++)		//进程按照到达时间进行从小到大的排序 
		{
			for(a=0;a<record-1;a++)
			{
				if(plan[a][0]>plan[a+1][0])
				{
					temp[a][0]=plan[a][0];
					temp[a][1]=plan[a][1];
					name_temp[a]=name[a];
					plan[a][0]=plan[a+1][0];
					plan[a][1]=plan[a+1][1];
					name[a]=name[a+1];
					plan[a+1][0]=temp[a][0];
					plan[a+1][1]=temp[a][1];
					name[a+1]=name_temp[a];
				}
			}
		}
		
		second(record); 	//显示排序好的进程 
		
		i = 0;
		int max;
		int lin;
		int count = 0,count_temp = 0,sign = 0,sign_temp = 0;  //count:用于计数 count_temp:用于临时增加计数，来保持count的初始值  sign:用于while退出   sign_temp:用于却定第一个进程的显示
		max = plan[count][1]+plan[count][0];	 
		while(1)
		{
			for(;count<record;count++)  //算法优化:保持count不要每次都从0开始,当前一个进程结束后,便不便利前面的进程 
			{
				if(i==plan[count][0])
				{
					printf("\n%d   进程%c到达内存\n",i,name[count]);
					printf("\n内存使用情况\n");
					printf("\n分区号     作业号     起始地址     分区大小     状态\n");
					i_cha++;
					
					for(i_count=0;i_count<i_cha;i_count++)
					{
						if(link[i_count].sign==0&&link[i_count].size>chache[count])
						{
							lin = i_count;
							for(i_count=i_cha;i_count>lin;i_count--)
							{
								link[i_count] = link[i_count-1];
							}
							break;	
						}
					}
					
					link[lin].name=name[count];
					link[lin].address=link[lin+1].address;
					link[lin].size=chache[count];
					link[lin].sign=1;
					
					link[lin+1].address=link[lin].address+link[lin].size;
					link[lin+1].size=link[lin+1].size-link[lin].size;
					
					for(i_count=0;i_count<=i_cha;i_count++)
					{
						printf("\n%3d    %8c     %8d     %8d     %4d\n",i_count,link[i_count].name,link[i_count].address,link[i_count].size,link[i_count].sign);	
					}
					
					if(sign_temp==0)
					{
						printf("\n%d   进程%c开始执行\n",i,name[count]);
						max = plan[count][1]+plan[count][0];	//max:到达时间
						sign_temp=1;
					}
				}
				if(i==max)
				{
					printf("\n%d   进程%c结束\n",i,name[count]);
					printf("\n内存使用情况\n");
					printf("\n分区号     作业号     起始地址     分区大小     状态\n");
					for(i_count=0;i_count<i_cha;i_count++)
					{
						if(link[i_count].name==name[count])
						{
							lin = i_count;
							link[i_count].name=' ';
							link[i_count].sign=0;
							break; 
						}	
					}
					if(link[i_count-1].sign==0&&i_count!=0)
					{
						link[i_count-1].size=link[i_count-1].size+link[i_count].size;
						for(;i_count<i_cha;i_count++)
						{
							link[i_count]=link[i_count+1];
						}
						i_count = lin-1;
						i_cha--;
					}
					if(link[i_count+1].sign==0)
					{
						link[i_count].size=link[i_count+1].size+link[i_count].size;
						i_count++;
						for(;i_count<i_cha;i_count++)
						{
							link[i_count]=link[i_count+1];
						}
						i_cha--;
					}
					
					for(i_count=0;i_count<=i_cha;i_count++)
					{
						printf("\n%3d    %8c     %8d     %8d     %4d\n",i_count,link[i_count].name,link[i_count].address,link[i_count].size,link[i_count].sign);	
					}
					
					time[count][0]=i;		//完成时间 
					time[count][1]=i-plan[count][0];	//周转时间 
					quan[count]=(float)time[count][1]/plan[count][1]; 	//带权周转时间 
					
					if(i<plan[count+1][0]) //预防队列中没有排队的进程 
					{
						count_temp++;
						sign_temp=0;
						goto aa;
					}
					
					if(count!=record-1)
					{
						printf("\n%d   进程%c开始执行\n",i,name[count+1]);
						max = i + plan[count+1][1];
					}
					else if(count==record-1)
					{
						sign = 1;
					}
					count_temp++;
				}
			}
			aa: count = count_temp;
			i++;
			if(sign==1)
			{
				break;
			}	
		}
		
		printf("\n进程名   到达时间   服务时间   完成时间   周转时间   带权时间\n");
		for(i=0;i<record;i++)
		{
			printf("%3c %9d %10d %10d %10d %12.2lf\n",name[i],plan[i][0],plan[i][1],time[i][0],time[i][1],quan[i]);
			sum = sum + time[i][1];
			sum_quan = sum_quan + quan[i];
		}
		avg = (float)sum/record;
		avg_quan = sum_quan/record;
		printf("\n平均周转时间: %.2lf       平均带权周转时间: %.2lf\n\n",avg,avg_quan);
	}
}

/*
	因为前面排序完成后，是按照到达时间来的，但是先到不一定就是短作业，所以这里采用创建另一个进程数组，
用于储存，进程到达之后的数据，也就是进程每到达一次，新数组里面就把他储存进去，并且讲新加入的数组，按照
服务时间进行新的排序，形成一个新的数组，即前面的就是服务时间短的进程。 
*/ 
void fourth(int record)
{
	if(record==0)
	{
		printf("没有进程创建!\n\n");
	}
	else
	{
		int i,a,sum=0;
		char name_temp[record];  //创建新的数组 用于储存第二次排序后的进程数组 
		int temp[record][2];
		char n_t;  //用于临时储存进程的名字，用于排序交换
		int plan_temp[record][2];
		float quan[record];
		float avg = 0;
		float avg_quan = 0;
		float sum_quan = 0;
		int time[record][2];
		
		for(i=0;i<record-1;i++)
		{
			for(a=0;a<record-1;a++)
			{
				if(plan[a][0]>plan[a+1][0])
				{
					temp[a][0]=plan[a][0];
					temp[a][1]=plan[a][1];
					name_temp[a]=name[a];
					plan[a][0]=plan[a+1][0];
					plan[a][1]=plan[a+1][1];
					name[a]=name[a+1];
					plan[a+1][0]=temp[a][0];
					plan[a+1][1]=temp[a][1];
					name[a+1]=name_temp[a];
				}
			}
		}
		
		second(record);
		
		int count = 0,sign_temp = 0, count_temp = 0,sign = 0;
		int max = plan[count][1]+plan[count][0];
		int h = 0,ch = 0,ji = 0;
		i = 0;
		int xun1,xun2;
		while(1)
		{
			for(;count<record;count++)
			{
				if(i==plan[count][0])
				{
					printf("\n%d   进程%c到达内存\n",i,name[count]);
					
					count_temp++;
					plan_temp[count][0]=plan[count][0];
					plan_temp[count][1]=plan[count][1];
					name_temp[count]=name[count];
					if(h+1!=count_temp)  //算法优化:当排队数组里面只有一个进程时，便不用排序，只有进程排队超过2时才排序，减少时间复杂度 
					{
						xun1 = h;
						for(;xun1<count_temp-1;xun1++)
						{
							for(xun2=h;xun2<count_temp-1;xun2++)
							{
								if(plan_temp[xun2][1]>plan_temp[xun2+1][1])
								{
									n_t = name_temp[xun2];
									name_temp[xun2]=name_temp[xun2+1];
									name_temp[xun2+1]=n_t;
									temp[0][1]=plan_temp[xun2][1];
									plan_temp[xun2][1]=plan_temp[xun2+1][1];
									plan_temp[xun2+1][1]=temp[0][1];
								}	
							}
						}
					}
					
					if(sign_temp==0)
					{
						printf("\n%d   进程%c开始执行\n",i,name[count]);
						max = plan[count][1]+plan[count][0];
						h++;
						sign_temp=1;
					}
				}
			}
			
			if(i==max)
			{
				printf("\n%d   进程%c结束\n",i,name_temp[h-1]);
				for(ji=0;ji<record;ji++)
				{
					if(name_temp[h-1]==name[ji])
					{
						time[ji][0]=i;
						time[ji][1]=i-plan[ji][0];
						quan[ji]=(float)time[ji][1]/plan[ji][1];
					}
				}
				
				if(i<plan[count+1][0]) //预防队列中没有排队的进程 
				{
					count_temp++;
					sign_temp=0;
					goto aa;
				}
				
				if(h!=record)
				{
					printf("\n%d   进程%c开始执行\n",i,name_temp[h]);
					max = i + plan_temp[h][1];
					h++;
				}
				else if(h==record)
				{
					sign = 1;
				}
				ch++;
			}
			
			aa: count = ch;
			i++;
			if(sign==1)
			{
				break;
			}
		}
		
		printf("\n进程名   到达时间   服务时间   完成时间   周转时间   带权时间\n");
		for(i=0;i<record;i++)
		{
			printf("%3c %9d %10d %10d %10d %12.2lf\n",name[i],plan[i][0],plan[i][1],time[i][0],time[i][1],quan[i]);
			sum = sum + time[i][1];
			sum_quan = sum_quan + quan[i];
		}
		avg = (float)sum/record;
		avg_quan = sum_quan/record;
		printf("\n平均周转时间: %.2lf       平均带权周转时间: %.2lf\n\n",avg,avg_quan);
	}
}

/*
	因为前面排序完成后，是按照到达时间来的，但是先到不一定就是短作业，所以这里采用创建另一个进程数组，
用于储存，进程到达之后的数据，也就是进程每到达一次，新数组里面就把他储存进去，并且讲新加入的数组，然后当完成前一个
进程后对排队数组进行高响应比计算，并把响应比大的放在前面。 
*/ 
void fifth(int record)
{
	if(record==0)
	{
		printf("没有进程创建!\n\n");
	}
	else
	{
		int i,a,sum=0;
		char name_temp[record]; 
		int temp[record][2];
		char n_t;
		int plan_temp[record][2];
		float quan[record];
		float avg = 0;
		float avg_quan = 0;
		float sum_quan = 0;
		int time[record][2];
		
		for(i=0;i<record-1;i++)
		{
			for(a=0;a<record-1;a++)
			{
				if(plan[a][0]>plan[a+1][0])
				{
					temp[a][0]=plan[a][0];
					temp[a][1]=plan[a][1];
					name_temp[a]=name[a];
					plan[a][0]=plan[a+1][0];
					plan[a][1]=plan[a+1][1];
					name[a]=name[a+1];
					plan[a+1][0]=temp[a][0];
					plan[a+1][1]=temp[a][1];
					name[a+1]=name_temp[a];
				}
			}
		}
		
		second(record);
		
		int count = 0,sign_temp = 0, count_temp = 0,sign = 0;
		float gao[record],gao_temp;  //gao[]:用于储存各个进程的高响应比 gao_temp:排序交换的临时量 
		int max = plan[count][1]+plan[count][0];
		int h = 0,ch = 0,ji = 0;  //ch:类比上面的count_temp  ji:用于计算完成，周转和带权的时间 
		i = 0;
		int xun1,xun2;
		while(1)
		{
			for(;count<record;count++)
			{
				if(i==plan[count][0])
				{
					printf("\n%d   进程%c到达内存\n",i,name[count]);
					
					count_temp++;
					plan_temp[count][0]=plan[count][0];
					plan_temp[count][1]=plan[count][1];
					name_temp[count]=name[count];
					
					if(sign_temp==0)
					{
						printf("\n%d   进程%c开始执行\n",i,name[count]);
						max = plan[count][1]+plan[count][0];
						h++;
						sign_temp=1;
					}
				}
			}
			
			if(i==max)
			{
				printf("\n%d   进程%c结束\n",i,name_temp[h-1]);
				
				if(h+1!=count_temp)
				{
					xun1 = h;
					for(;xun1<count_temp;xun1++)   //高响应比的计算 
					{
						gao[xun1]=(float)((max-plan_temp[xun1][0])/plan_temp[xun1][1])+1;
					}
						
					xun1 = h;
					for(;xun1<count_temp-1;xun1++)   //高响应比的排序 
					{
						for(xun2=h;xun2<count_temp-1;xun2++)
						{
							if(gao[xun2]<gao[xun2+1])
							{
								n_t = name_temp[xun2];
								name_temp[xun2]=name_temp[xun2+1];
								name_temp[xun2+1]=n_t;
								temp[0][1]=plan_temp[xun2][1];
								plan_temp[xun2][1]=plan_temp[xun2+1][1];
								plan_temp[xun2+1][1]=temp[0][1];
								gao_temp = gao[xun2];
								gao[xun2] = gao[xun2+1];
								gao[xun2+1] = gao_temp;
							}
						}
					}
				}
				
				for(ji=0;ji<record;ji++)
				{
					if(name_temp[h-1]==name[ji])
					{
						time[ji][0]=i;
						time[ji][1]=i-plan[ji][0];
						quan[ji]=(float)time[ji][1]/plan[ji][1];
					}
				}
				
				if(i<plan[count+1][0]) //预防队列中没有排队的进程 
				{
					count_temp++;
					sign_temp=0;
					goto aa;
				}
				
				if(h!=record)
				{
					printf("\n%d   进程%c开始执行\n",i,name_temp[h]);
					max = i + plan_temp[h][1];
					h++;
				}
				else if(h==record)
				{
					sign = 1;
				}
				ch++;
			}
			
			aa: count = ch;
			i++;
			if(sign==1)
			{
				break;
			}
		}
		
		printf("\n进程名   到达时间   服务时间   完成时间   周转时间   带权时间\n");
		for(i=0;i<record;i++)
		{
			printf("%3c %9d %10d %10d %10d %12.2lf\n",name[i],plan[i][0],plan[i][1],time[i][0],time[i][1],quan[i]);
			sum = sum + time[i][1];
			sum_quan = sum_quan + quan[i];
		}
		avg = (float)sum/record;
		avg_quan = sum_quan/record;
		printf("\n平均周转时间: %.2lf       平均带权周转时间: %.2lf\n\n",avg,avg_quan);
	}
}
